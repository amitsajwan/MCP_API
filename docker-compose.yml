version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: intelligent-orchestration-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - orchestration-network

  # Intelligent API Orchestration System
  orchestration-system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: intelligent-orchestration-system
    ports:
      - "8000:8000"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      qdrant:
        condition: service_healthy
    volumes:
      - ./api_specs:/app/api_specs:ro
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - orchestration-network
    restart: unless-stopped

  # Optional: Redis for additional caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: intelligent-orchestration-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - orchestration-network

volumes:
  qdrant_data:
    driver: local
  redis_data:
    driver: local

networks:
  orchestration-network:
    driver: bridge