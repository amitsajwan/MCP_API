{
  "openapi": "3.0.0",
  "info": {
    "title": "Keylink System Frontend",
    "description": "This API provides information associated with Keylink System.",
    "contact": {
      "name": "Keylink Frontend Renewal Team",
      "url": "https://<your-confluence-link>/display/KEY9871074/Keylink+Frontend+Renewal",
      "email": "kl-dev-squad-tide-all@pqr.com"
    },
    "license": {
      "name": "XYZ AG License",
      "url": "https://www.xyz.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://keylink-api.lab.ch.dbstest.net/api/TKS/1/KeylinkFrontendAPI/v1"
    }
  ],
  "tags": [
    {
      "name": "Account API"
    }
  ],
  "paths": {
    "/keylink/accounts": {
      "get": {
        "tags": [
          "Account API"
        ],
        "summary": "Retrieves accounts",
        "description": "Retrieves accounts based on query parameters. Encoded Keylink Session object must be provided as a request header.",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Category of the accounts",
            "required": true,
            "schema": {
              "type": "string",
              "example": "NON_TRANSACTION",
              "enum": [
                "ALL",
                "MAILBOX",
                "CASH_ALL",
                "NON_TRANSACTION",
                "PENDING_NON_TRANSACTION",
                "PAYMENT",
                "NOTIF_TO_RECEIVE",
                "CASH_ACCOUNT_POSITIONS",
                "PORTFOLIO_INFORMATION",
                "SETTLEMENT_INSTRUCTION",
                "OUTGOING_SEPA_CHDD",
                "MISCELLANEOUS_REPORTS",
                "SECURITIES_CORPORATE_EVENTS",
                "CLS_ATAP",
                "FIRM_NORTON"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts search response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request validation failed due to invalid or missing parameters.",
            "content": {
              "application/problem+json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestValidationFailed"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. You are not authorized to use this function.",
            "content": {
              "application/problem+json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Forbidden"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountsResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "Account": {
        "type": "object"
      },
      "BadRequestValidationFailed": {
        "required": [
          "type",
          "status",
          "title"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A URI reference that identifies the problem type.",
            "enum": [
              "/api/status-codes/validation-error"
            ]
          },
          "status": {
            "type": "integer",
            "description": "The HTTP status code.",
            "maximum": 400,
            "minimum": 400
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable, translated (see the `Accept-Language` request header) summary\nof the problem type. It SHOULD NOT change from occurrence to occurrence of the problem.\n",
            "example": "The request is invalid."
          },
          "detail": {
            "type": "string",
            "description": "A human-readable, translated (see the `Accept-Language` request header) explanation\nspecific to this occurrence of the problem.\n",
            "example": "Unexpected value for foo."
          },
          "invalid-params": {
            "type": "array",
            "items": {
              "required": [
                "name",
                "reason"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Parameter name of resource to map reason message.",
                  "example": "foo"
                },
                "reason": {
                  "type": "string",
                  "description": "Translated explanation to the user how to resolve the issue.",
                  "example": "Must be a positive integer"
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "required": [
          "type",
          "status",
          "title"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A URI reference that identifies the problem type.",
            "enum": [
              "/api/status-codes/forbidden"
            ]
          },
          "status": {
            "type": "integer",
            "description": "The HTTP status code.",
            "maximum": 403,
            "minimum": 403
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable, translated summary of the problem type.",
            "example": "Forbidden."
          },
          "detail": {
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "You are not authorised to use this function."
          }
        }
      }
    }
  }
}